#!/bin/sh
# shellcheck disable=SC2012,SC1090
#
# Shellcheck ignore list:
#  - SC2012: Use find instead of ls to better handle non-alphanumeric filenames.
#  - SC1090: Can't follow non-constant source. Use a directive to specify location.
#
# You can find more details for each warning at the following page: 
#    https://github.com/koalaman/shellcheck/wiki/<SCXXXX>
#
# $HOME/doe/bin/doe
#
# doeZen by Oleksii Kucheruk <ok@raccoons.co> (raccoon1) https://github.com/itraccoons/doe
# Create your own 3-level CLI with tab complition
#
# doe <module> <function> [options]

DOE_DIR=doe
DOE_BASEDIR=$HOME
DOE_HOMEDIR=$DOE_BASEDIR/$DOE_DIR
DOE_MODDIR=$DOE_HOMEDIR/modules
DOE_TMPDIR=$DOE_HOMEDIR/.tmp

. $DOE_HOMEDIR/doe.conf

die()
{
    echo "$1"
    exit 1
}

call_module()
{
    case $1 in
	list-modules)
	    # Find all dirictories ("modules") in the directory with all modules.
	    # Replace newlines with space. Return $string
	    #basename -a $(find -L $DOE_MODDIR/* -type d -maxdepth 0 2>/dev/null)  | tr '\n' ' '
	    #find -L "$DOE_MODDIR"/* -type d -maxdepth 0 -exec basename -a {} + 2>/dev/null | tr '\n' ' '
	    ls "$DOE_MODDIR" | tr '\n' ' '
	    ;;
	$1)
	    if [ -d "$DOE_MODDIR/$1" ]; then
		call_module_function "$@" || die "Usage: doe $1 <function>\nfunctions: $($0 $1 list-functions)"
	    else
		return 1
	    fi
	    ;;
    esac
}

call_module_function()
{
    mod=$1		# Module name = Directory name
    func=$2		# Function name
    case "${func}" in
	list-functions)
	    # Find all files ("functions") in the module directory.
	    # Cut module name. Replace newlines with space. Return $string
	    #basename -a $(find -L "$DOE_MODDIR/${mod}"/* -type f -maxdepth 0 2>/dev/null) | cut -d'.' -f2 | tr '\n' ' '
	    #find -L "$DOE_MODDIR/${mod}"/* -type f -maxdepth 0 -exec basename -a {} + 2>/dev/null | cut -d'.' -f2 | tr '\n' ' '
	    ls $DOE_MODDIR/${mod} | cut -d'.' -f2 | tr '\n' ' '
	    ;;
	$func)
	    func_file="$DOE_MODDIR/${mod}/${mod}.${func}"
	    if [ -f "${func_file}" ]; then
		shift 2	# Remove two args from $@
		if [ -x "${func_file}" ]; then
		    exec "${func_file}" "$@"
		else
		    . "${func_file}" "$@"
		fi
	    else
		return 1
	    fi
    esac
}

################################################################################

call_module ${@:-${default_function}} || die "Usage: doe <module>\nmodules: $($0 list-modules)"
